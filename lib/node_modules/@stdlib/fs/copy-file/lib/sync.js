/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var copyFile = require( 'fs' ).copyFileSync; // eslint-disable-line node/no-sync, node/no-unsupported-features/node-builtins
var semver = require( 'semver' );
var readFile = require( '@stdlib/fs/read-file' ).sync; // eslint-disable-line node/no-sync
var writeFile = require( '@stdlib/fs/write-file' ).sync; // eslint-disable-line node/no-sync
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isBuffer = require( '@stdlib/assert/is-buffer' );
var VERSION = require( '@stdlib/process/node-version' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Synchronously copies src to dest.By default, dest is overwritten if it already exists.
*
* @param {(string|Buffer)} src - source filename to copy
* @param {(string|Buffer)} dest - destination filename of the copy operation
* @param {(integer)} [mode] - modifiers for copy operation.
* @returns {(Error|null)} error object or null
*
* @example
* var err = copyFileSync( 'src.txt', 'dest.txt' );
* if ( err instanceof Error ) {
*     console.error( err.message );
* }
*/
function copyFileSync( src, dest, mode ) {
	try {
		if ( arguments.length < 3 ) {
			mode = null;
		}
		if ( !isString( src ) && !isBuffer( src ) ) {
			throw new TypeError( format( 'invalid argument. The "src" argument must be of type string or an instance of Buffer. Received type: %s.', typeof src ) );
		}
		if ( !isString( dest ) && !isBuffer( dest ) ) {
			throw new TypeError( format( 'invalid argument. The "dest" argument must be of type string or an instance of Buffer. Received type: %s.', typeof dest ) );
		}
		if ( !isNumber( mode ) && mode !== null ) {
			throw new TypeError( format( 'invalid argument. The "mode" argument must be of type number. Received type: %s.', typeof mode ) );
		}
		if ( semver.gte( VERSION, '8.5.0' ) ) {
			copyFile( src, dest, mode );
		} else {
			var data = readFile( src );
			writeFile( dest, data );
		}
	} catch ( error ) {
		return error;
	}
	return null;
}


// EXPORTS //

module.exports = copyFileSync;
